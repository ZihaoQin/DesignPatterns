定义一个抽象类，以不同的方式实现抽象类

使用protected保证不该暴露的方法暴露

模板方法：定义了调用其他方法的顺序，并且子类是不能修改的，这个叫做模板方法



钩子方法:定义一个boolean值flag,通过flag来控制方法的执行与否




模板方法：模板方法模式就是在模板方法中按照一个的规则和顺序调用基本方法，
         具体到我们上面那个例子就是 run 方法按照规定的顺序(先调用 start,然后再调用 engineBoom，再调用
         alarm，最后调用 stop)调用本类的其他方法，并且由 isAlarm 方法的返回值确定 run 中的执行顺序变更，
         模板方法是通过汇总或排序基本方法而产生的结果集


         模板方法在一些开源框架中应用很多，它提供了一个抽象类，然后开源框架写了一堆子类，
         在《XXX In Action》中就说明了，如果你需要扩展功能，可以继承了这个抽象类，
         然后修改 protected 方法，再然后就是调用一个类似 execute 方法，就完成你的扩展开发，确实是一种简单的模式。


         spring的后置处理器

父类如何调用子类的方法：（不建议使用）（模板方法可以解决这个问题）
        1、把子类传递到父类的有参构造中，然后调用；
        2、使用反射的方式调用，你使用了反射还有谁不能调用的？！
        3、父类调用子类的静态方法。

        在重写了父类部分方法后，再调用从父类继承的方法，产生
        不同的结果（而这正是模板方法模式），这是不是也可以理解为父类调用了子类的方法呢？你修改了子类，
        影响了父类的结果，模板方法模式就是这样效果。


    注意：注意与门面模式比较；
           门面模式：新建一个类，在新建类中入住一个目标类，按自定义顺序调用目标类的方法。
           模板方法：在目标类自身中通过某一方法A，按自定义顺序调用其它方法，通过子类具体实现被调用的方法，并调用父类的方法A